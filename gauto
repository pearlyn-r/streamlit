import os
import pandas as pd
from datetime import datetime
import openpyxl
from openpyxl.utils.dataframe import dataframe_to_rows
import shutil
import chardet

def get_all_csv_files(folder_path):
    return [f for f in os.listdir(folder_path) if f.endswith('.csv')]

def detect_encoding(file_path):
    with open(file_path, 'rb') as f:
        raw = f.read(10000)
        result = chardet.detect(raw)
        return result['encoding']

def read_csv_with_encoding(file_path):
    try:
        encoding = detect_encoding(file_path)
        print(f"Detected encoding: {encoding}")
        df = pd.read_csv(file_path, encoding=encoding, delimiter=',', header=None, on_bad_lines='skip')

        print(f"Raw DataFrame shape: {df.shape}")

        if len(df) <= 2:
            raise ValueError("Too few rows after reading")

        df.drop(index=0, inplace=True)
        df.reset_index(drop=True, inplace=True)

        headers = df.iloc[1, 0:9].tolist()
        print(f"Extracted headers from second row: {headers}")

        df = df.iloc[2:]
        df.columns = headers + list(df.columns[len(headers):])
        df.reset_index(drop=True, inplace=True)
        print(f"Processed DataFrame shape: {df.shape}")
        return df
    except Exception as e:
        print(f"Error reading CSV {file_path}: {e}")
        return None

def extract_date_from_dataframe(df):
    try:
        if df is not None and len(df.columns) > 9 and len(df) > 1:
            value = df.iloc[1, 9]
            print(f"Extracting date from value: {value}")
            if pd.notnull(value):
                try:
                    return datetime.strptime(str(value), "%m/%d/%Y")
                except:
                    return pd.to_datetime(value).to_pydatetime()
    except Exception as e:
        print(f"Date parsing failed: {e}")
    return None

def extract_data(df):
    try:
        selected = df.iloc[:, [0, 1, 4, 6, 13]].copy()
        selected.columns = ['A', 'B', 'E', 'G', 'N']
        selected.dropna(how='all', inplace=True)
        return selected
    except Exception as e:
        print(f"Error extracting data: {e}")
        return None

def refresh_pivot_table(workbook, sheet_name='Sheet2'):
    try:
        worksheet = workbook[sheet_name]
        for pivot_table in worksheet._pivots:
            pivot_table.cache.refreshOnLoad = True
    except Exception as e:
        print(f"Error refreshing pivot table: {e}")

def rename_file_with_date(file_path, folder_path, file_date):
    try:
        new_filename = f"file_{file_date.strftime('%Y%m%d')}.csv"
        new_file_path = os.path.join(folder_path, new_filename)
        os.rename(file_path, new_file_path)
        print(f"Renamed file to: {new_filename}")
        return new_filename, new_file_path
    except Exception as e:
        print(f"Rename failed: {e}")
        return None, None

def process_files(folder_path, template_path):
    csv_files = get_all_csv_files(folder_path)
    if not csv_files:
        print("No CSV files found.")
        return

    for filename in csv_files:
        file_path = os.path.join(folder_path, filename)
        df = read_csv_with_encoding(file_path)

        if df is None:
            continue

        file_date = extract_date_from_dataframe(df)
        if not file_date:
            print(f"Date not found or invalid in: {filename}")
            continue

        new_filename, new_file_path = rename_file_with_date(file_path, folder_path, file_date)
        if new_file_path is None:
            continue

        extracted_data = extract_data(df)
        if extracted_data is None or extracted_data.empty:
            print(f"No valid data in {new_filename}")
            continue

        summary_filename = f"summary_{file_date.strftime('%Y%m%d')}.xlsx"
        summary_path = os.path.join(folder_path, summary_filename)

        try:
            shutil.copy2(template_path, summary_path)
            wb = openpyxl.load_workbook(summary_path)
            sheet1 = wb['Sheet1']
            sheet1.delete_rows(1, sheet1.max_row)

            headers = ['A', 'B', 'E', 'G', 'N']
            for col_idx, header in enumerate(headers, 1):
                sheet1.cell(row=1, column=col_idx, value=header)

            for row_idx, row in enumerate(dataframe_to_rows(extracted_data, index=False, header=False), 2):
                for col_idx, value in enumerate(row, 1):
                    sheet1.cell(row=row_idx, column=col_idx, value=value)

            refresh_pivot_table(wb, 'Sheet2')
            wb.save(summary_path)
            wb.close()

            print(f"Summary saved: {summary_filename}")

        except Exception as e:
            print(f"Failed to create summary for {new_filename}: {e}")

def main():
    folder_path = input("Enter the folder path containing CSV files: ").strip()
    template_path = input("Enter the path to the template Excel file: ").strip()

    if not os.path.exists(folder_path):
        print(f"Folder path does not exist: {folder_path}")
        return

    if not os.path.exists(template_path):
        print(f"Template file does not exist: {template_path}")
        return

    process_files(folder_path, template_path)
    print("Processing completed!")

if __name__ == "__main__":
    main()
