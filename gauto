import os
import pandas as pd
from datetime import datetime
import openpyxl
from openpyxl.utils.dataframe import dataframe_to_rows
import shutil

def get_all_csv_files(folder_path):
    """Get all CSV files in the folder"""
    return [f for f in os.listdir(folder_path) if f.endswith('.csv')]

def read_csv_with_encoding(file_path):
    """Read CSV file with encoding detection"""
    encodings_to_try = ['utf-8', 'utf-16', 'utf-16-le', 'utf-16-be', 'latin-1', 'cp1252', 'iso-8859-1']
    try:
        import chardet
        with open(file_path, 'rb') as f:
            raw_data = f.read(10000)
            detected_encoding = chardet.detect(raw_data)['encoding']
            if detected_encoding:
                encodings_to_try.insert(0, detected_encoding)
    except:
        pass

    for encoding in encodings_to_try:
        try:
            df = pd.read_csv(file_path, encoding=encoding)
            return df
        except:
            continue

    try:
        df = pd.read_csv(file_path, encoding='utf-8', errors='ignore')
        return df
    except:
        return None

def get_date_from_csv(file_path):
    """Extract date from cell J2 (row 2, col 10)"""
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()

        if len(lines) < 2:
            print(f"{file_path} doesn't have enough rows")
            return None

        second_row = lines[1].strip().split(',')
        if len(second_row) < 10:
            print(f"{file_path} doesn't have column J in second row")
            return None

        date_value = second_row[9].strip()

        if not date_value:
            return None

        try:
            return datetime.strptime(date_value, "%m/%d/%Y")
        except ValueError:
            try:
                return pd.to_datetime(date_value).to_pydatetime()
            except:
                return None

    except Exception as e:
        print(f"Error reading date from {file_path}: {e}")
        return None

def rename_csv_files(folder_path):
    """Rename CSV files based on date in J2 cell"""
    renamed_files = []

    for filename in os.listdir(folder_path):
        if filename.endswith('.csv'):
            file_path = os.path.join(folder_path, filename)
            file_date = get_date_from_csv(file_path)

            if file_date:
                new_filename = f"file_{file_date.strftime('%Y%m%d')}.csv"
                new_file_path = os.path.join(folder_path, new_filename)

                try:
                    os.rename(file_path, new_file_path)
                    renamed_files.append((new_file_path, file_date))
                    print(f"Renamed: {filename} -> {new_filename}")
                except Exception as e:
                    print(f"Error renaming {filename}: {e}")
            else:
                print(f"No valid date in {filename}")

    return renamed_files

def extract_data_from_csv(file_path):
    """Extract data from columns A, B, E, G, N starting from row 3"""
    try:
        df = pd.read_csv(file_path, encoding='utf-8', header=1)

        if df is None or df.empty:
            print(f"No data in {file_path}")
            return None

        if len(df.columns) < 14:
            print(f"Not enough columns in {file_path}")
            return None

        # Select columns by index (0, 1, 4, 6, 13)
        selected = df.iloc[:, [0, 1, 4, 6, 13]].copy()
        selected.columns = ['A', 'B', 'E', 'G', 'N']
        selected.dropna(how='all', inplace=True)

        return selected

    except Exception as e:
        print(f"Error extracting data from {file_path}: {e}")
        return None

def refresh_pivot_table(workbook, sheet_name='Sheet2'):
    """Refresh pivot table in specified sheet"""
    try:
        worksheet = workbook[sheet_name]
        for pivot_table in worksheet._pivots:
            pivot_table.cache.refreshOnLoad = True
        print(f"Pivot table in {sheet_name} marked for refresh")
    except Exception as e:
        print(f"Error refreshing pivot table: {e}")

def process_files(folder_path, template_path):
    """Main function to process all files"""
    csv_files = get_all_csv_files(folder_path)

    if not csv_files:
        print("No CSV files found.")
        return

    print(f"Found {len(csv_files)} CSV files.")
    renamed_files = rename_csv_files(folder_path)

    if not renamed_files:
        print("No files were renamed due to missing/invalid dates.")
        return

    for file_path, file_date in renamed_files:
        print(f"Processing: {os.path.basename(file_path)}")

        extracted_data = extract_data_from_csv(file_path)

        if extracted_data is None or extracted_data.empty:
            print(f"No valid data in {file_path}")
            continue

        date_str = file_date.strftime('%Y%m%d')
        summary_filename = f"summary_{date_str}.xlsx"
        summary_path = os.path.join(folder_path, summary_filename)

        try:
            shutil.copy2(template_path, summary_path)
            wb = openpyxl.load_workbook(summary_path)

            sheet1 = wb['Sheet1']
            sheet1.delete_rows(1, sheet1.max_row)

            headers = ['A', 'B', 'E', 'G', 'N']
            for col_idx, header in enumerate(headers, 1):
                sheet1.cell(row=1, column=col_idx, value=header)

            for row_idx, row in enumerate(dataframe_to_rows(extracted_data, index=False, header=False), 2):
                for col_idx, value in enumerate(row, 1):
                    sheet1.cell(row=row_idx, column=col_idx, value=value)

            refresh_pivot_table(wb, 'Sheet2')

            wb.save(summary_path)
            wb.close()

            print(f"Summary saved: {summary_filename}")

        except Exception as e:
            print(f"Failed to create summary for {file_path}: {e}")

def main():
    folder_path = input("Enter the folder path containing CSV files: ").strip()
    template_path = input("Enter the path to the template Excel file: ").strip()

    if not os.path.exists(folder_path):
        print(f"Folder path does not exist: {folder_path}")
        return

    if not os.path.exists(template_path):
        print(f"Template file does not exist: {template_path}")
        return

    process_files(folder_path, template_path)
    print("Processing completed!")

if __name__ == "__main__":
    main()
