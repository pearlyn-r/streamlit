# file: mtm_notional_processor.py

import os
import shutil
import pandas as pd
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows

def read_csv_with_encoding(file_path):
    try:
        encoding = 'utf-16-le'
        df = pd.read_csv(file_path, encoding=encoding, sep='\t', header=None, engine='python', keep_default_na=False)
        headers = df.iloc[0, 0:9].tolist()
        for col_idx in range(9):
            try:
                df.iloc[3:, col_idx] = pd.to_numeric(df.iloc[3:, col_idx], errors='ignore')
            except Exception:
                continue
        return df
    except Exception as e:
        print(f"Failed reading CSV: {e}")
        return None

def extract_date_from_dataframe(df):
    try:
        value = df.iloc[1, 9]
        if pd.notnull(value):
            try:
                return datetime.strptime(str(value), "%Y-%m-%d")
            except:
                return pd.to_datetime(value).to_pydatetime()
    except Exception as e:
        print(f"Date parsing failed: {e}")
    return None

def extract_mapping(workbook, sheet_name):
    try:
        mapping = {}
        ws = workbook[sheet_name]
        for row in ws.iter_rows(min_row=2, values_only=True):
            key, comment = row[:2]
            if key:
                mapping[str(key).strip()] = str(comment).strip() if comment else ""
        return mapping
    except Exception as e:
        print(f"Mapping extraction failed: {e}")
        return {}

def extract_data(df, columns):
    try:
        selected = df.iloc[:, list(range(9))].copy()
        selected.columns = columns[:-1]  # exclude "Comment"
        return selected
    except Exception as e:
        print(f"Data extraction failed: {e}")
        return pd.DataFrame()

def apply_mapping(df, mapping, ref_col):
    df['Comment'] = df[ref_col].astype(str).str.strip().map(lambda k: mapping.get(k, "Under investigation"))
    return df

def populate_sheet(wb, sheet_name, df):
    sheet = wb[sheet_name]
    sheet.delete_rows(1, sheet.max_row)
    for row in dataframe_to_rows(df, index=False, header=True):
        sheet.append(row)

def refresh_pivot_tables(wb, sheet_names):
    for name in sheet_names:
        try:
            ws = wb[name]
            for pt in ws._pivots:
                pt.cache.refresh_on_load = True
                pt.refresh_data_on_open = True
        except Exception as e:
            print(f"Failed refreshing pivot in {name}: {e}")

def rename_file_with_prefix(file_path, file_date, prefix):
    try:
        folder_path = os.path.dirname(file_path)
        new_filename = f"{prefix}_{file_date.strftime('%Y%m%d')}.csv"
        new_path = os.path.join(folder_path, new_filename)
        os.rename(file_path, new_path)
        return new_filename, new_path
    except Exception as e:
        print(f"Rename failed: {e}")
        return None, None

def process_files(template_path, mtm_path, notional_path):
    mtm_df = read_csv_with_encoding(mtm_path)
    notional_df = read_csv_with_encoding(notional_path)

    mtm_date = extract_date_from_dataframe(mtm_df)
    notional_date = extract_date_from_dataframe(notional_df)

    if not mtm_date or not notional_date:
        print("Failed to extract date from one of the files.")
        return

    mtm_filename, mtm_new_path = rename_file_with_prefix(mtm_path, mtm_date, "mtm")
    notional_filename, notional_new_path = rename_file_with_prefix(notional_path, notional_date, "notional")

    summary_filename = f"summary_{mtm_date.strftime('%Y%m%d')}.xlsx"
    summary_dir = os.path.join(os.path.dirname(template_path), "summary_output")
    os.makedirs(summary_dir, exist_ok=True)
    summary_path = os.path.join(summary_dir, summary_filename)

    shutil.copy2(template_path, summary_path)
    wb = load_workbook(summary_path)

    mtm_mapping = extract_mapping(wb, 'MTM_Mapping')
    notional_mapping = extract_mapping(wb, 'Notional_Mapping')

    mtm_data = extract_data(mtm_df, ["BreakReasonCode", "SystemCorrect", "USD_Abs_Diff", "NettingGroupCount", "BreakReasonCodeCount", "Extra1", "Extra2", "Extra3", "Extra4", "Comment"])
    notional_data = extract_data(notional_df, ["BreakReasonCode", "SystemCorrect", "USD_Abs_Diff", "NettingGroupCount", "BreakReasonCodeCount", "Extra1", "Extra2", "Extra3", "Extra4", "Comment"])

    mtm_data = apply_mapping(mtm_data, mtm_mapping, "BreakReasonCode")
    notional_data = apply_mapping(notional_data, notional_mapping, "BreakReasonCode")

    populate_sheet(wb, "MTM_Data", mtm_data)
    populate_sheet(wb, "Notional_Data", notional_data)

    refresh_pivot_tables(wb, ["MTM_Pivot", "Notional_Pivot"])

    for sheet in ["MTM_Mapping", "Notional_Mapping"]:
        if sheet in wb.sheetnames:
            wb.remove(wb[sheet])

    wb.save(summary_path)
    wb.close()
    print(f"Saved summary to: {summary_path}")

def main():
    template_path = input("Enter template path: ").strip()
    mtm_path = input("Enter MTM CSV path: ").strip()
    notional_path = input("Enter Notional CSV path: ").strip()

    process_files(template_path, mtm_path, notional_path)

if __name__ == "__main__":
    main()
